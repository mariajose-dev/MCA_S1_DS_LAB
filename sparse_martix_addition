#include <stdio.h>
#include <stdlib.h>

// Structure to represent a non-zero element
struct Element {
    int row, col, val;
};

// Function to read sparse matrix
void readSparse(struct Element matrix[]) {
    int n, i;
    printf("Enter total rows and columns of the matrix: ");
    scanf("%d %d", &matrix[0].row, &matrix[0].col);

    printf("Enter number of non-zero elements: ");
    scanf("%d", &matrix[0].val);

    for (i = 1; i <= matrix[0].val; i++) {
        printf("Enter row, column and value for element %d: ", i);
        scanf("%d %d %d", &matrix[i].row, &matrix[i].col, &matrix[i].val);
    }
}

// Function to display sparse matrix
void display(struct Element matrix[]) {
    int i;
    printf("\nRow\tCol\tValue\n");
    for (i = 0; i <= matrix[0].val; i++) {
        printf("%d\t%d\t%d\n", matrix[i].row, matrix[i].col, matrix[i].val);
    }
}

// Function to add two sparse matrices
void addSparse(struct Element a[], struct Element b[], struct Element result[]) {
    int i = 1, j = 1, k = 1;

    if (a[0].row != b[0].row || a[0].col != b[0].col) {
        printf("\nMatrix dimensions must match to perform addition!\n");
        result[0].val = 0;
        return;
    }

    result[0].row = a[0].row;
    result[0].col = a[0].col;

    while (i <= a[0].val && j <= b[0].val) {
        if (a[i].row == b[j].row && a[i].col == b[j].col) {
            result[k].row = a[i].row;
            result[k].col = a[i].col;
            result[k].val = a[i].val + b[j].val;
            i++;
            j++;
            k++;
        } else if (a[i].row < b[j].row || (a[i].row == b[j].row && a[i].col < b[j].col)) {
            result[k++] = a[i++];
        } else {
            result[k++] = b[j++];
        }
    }

    while (i <= a[0].val) result[k++] = a[i++];
    while (j <= b[0].val) result[k++] = b[j++];

    result[0].val = k - 1;
}

// Main menu-driven program
int main() {
    struct Element A[5], B[5], Result[5];
    int choice;

    do {
        printf("\n===== Sparse Matrix Menu =====\n");
        printf("1. Input Matrix A\n");
        printf("2. Input Matrix B\n");
        printf("3. Display Matrix A\n");
        printf("4. Display Matrix B\n");
        printf("5. Add Matrix A and B\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("\nEnter elements for Matrix A\n--------------------------\n");
            readSparse(A);
            break;

        case 2:
            printf("\nEnter elements for Matrix B\n--------------------------\n");
            readSparse(B);
            break;

        case 3:
            printf("\nMatrix A:");
            display(A);
            break;

        case 4:
            printf("\nMatrix B:");
            display(B);
            break;

        case 5:
            printf("\nAdding Matrix A and Matrix B\n-----------------------------\n");
            if (A[0].row != B[0].row || A[0].col != B[0].col) {
                printf("\n****Cannot perform addition. Matrix orders do not match.****\n");
            } else {
                addSparse(A, B, Result);
                printf("\nResultant Matrix (A + B):");
                display(Result);
            }
            break;

        case 6:
            printf("Exiting program.\n");
            break;

        default:
            printf("Invalid choice! Try again.\n");
        }
    } while (choice != 6);

    return 0;
}
